url <- "http://www.spiegel.de/schlagzeilen/"
content <- html(url, encoding = "utf8")
library(rvest)
content <- html(url, encoding = "utf8")
anchors <- html_nodes(content, xpath = "//a//span")
headlines <- html_text(anchors)
headlines
anchors <- html_nodes(content, xpath = "//a//span[1]")
headlines <- html_text(anchors)
headlines
anchors <- html_nodes(content, xpath = "//a//span[2]")
headlines2 <- html_text(anchors)
anchors <- html_nodes(content, xpath = "//a//span[1]")
headlines1 <- html_text(anchors)
anchors <- html_nodes(content, xpath = '//*[contains(concat( " ", @class, " " ), concat( " ", "headline-date", " " ))]')
ressort <- html_text(anchors)
ressort
length(hetadlines1)
length(headlines1)
length(headlines2)
anchors <- html_nodes(content, xpath = '//span')
ressort <- html_text(anchors)
ressort
url <- "http://transparency.org"
download.file(url, destfile = "transparency.html")
dir()
download.file(url, destfile = "data/exercises/transparency.html")
html <- html("data/exercises/transparency.html")
html
content <- html("data/exercises/transparency.html")
anchors <- html_nodes(content, xpath = "//a/@href")
links <- html_text(anchors)
links <- html_attr(anchors)
?html_nodes
?html_attr
xpathSApply(content, "//a/@href", xmlGetAttr, "href")
library(XML)
xpathSApply(content, "//a/@href", xmlGetAttr, "href")
xpathSApply(content, xmlGetAttr, "//a/@href", )
xpathSApply(content, xmlGetAttr, "//a/@href")
?xmlGetAttr
xpathSApply(content, "//a", xmlGetAttr, "href")
readHTMLLinks(content)
getHTMLLinks(content)
xpathSApply(content, "//a", xmlGetAttr, "href")
?html_attr()
anchors <- html_nodes(content, xpath="//a")
html_attr(anchors, "href")
xpathSApply(content, "//a", xmlGetAttr, "href")
getHTMLLinks(content)
xpath <- '//*[(@id = "Highlights")]//*[contains(concat( " ", @class, " " ), concat( " ", "headerRegular", " " ))]//a'
xpathSApply(content, xpath)
xpathSApply(content, xpath, xmlValue)
xpath <- '//hr[@class="headerRegular"]'
xpathSApply(content, xpath, xmlValue)
xpath <- '//h3[@class="headerRegular"]'
xpathSApply(content, xpath, xmlValue)
xpath <- '//*[(@id = "Highlights")]//*[contains(concat( " ", @class, " " ), concat( " ", "headerRegular", " " ))]//a'
xpathSApply(content, xpath, xmlValue)
xpath <- '//*[contains(concat( " ", @class, " " ), concat( " ", "sitemapGroup", " " )) and (((count(preceding-sibling::*) + 1) = 4) and parent::*)]//a'
xpathSApply(content, xpath, xmlValue)
tables <- readHTMLTable("http://en.wikipedia.org/wiki/List_of_MPs_elected_in_the_United_Kingdom_general_election,_1992", encoding = "utf-8")
names(tables)
mps <- tables[[4]]
head(mps)
head(mps)
names(mps) <- c("con", "name", "party")
mps <- mps[-1,]
mps <- mps[!is.na(as.character(mps$party)),]
nrow(mps)
mps$name <- as.character(mps$name)
mps$sir <- str_detect(mps$name, "^Sir")
library(stringr)
library(XML)
# look for Sirs
mps$name <- as.character(mps$name)
mps$sir <- str_detect(mps$name, "^Sir")
table(mps$party, mps$sir)
prop.table(table(mps$party, mps$sir), 1)
library(jsonlite)
library(RCurl)
feed_url <- "http://weather.yahooapis.com/forecastrss"
feed <- getForm(feed_url , .params = list(w = "2422673", u = "c"))
parsed_feed <- xmlParse(feed)
parsed_feed
xpath <- "//yweather:location|//yweather:wind|//yweather:condition"
conditions <- unlist(xpathSApply(parsed_feed, xpath, xmlAttrs))
location <- t(xpathSApply(parsed_feed, "//yweather:location", xmlAttrs))
forecasts <- t(xpathSApply(parsed_feed, "//yweather:forecast", xmlAttrs))
forecast <- merge(location, forecasts)
options(yahooid = "v.m4rTvV34GgKVVL5PEAG1uIcHyKfmY8mCJjqSl7Gx3Jkp3s2B14xCc89rQYKOmN8nc.OFbL")
baseurl <- "http://where.yahooapis.com/v1/places.q('%s')"
woeid_url <- sprintf(baseurl, URLencode("Hoboken, NJ, USA")) # careful: URL encoding!
parsed_woeid <- xmlParse((getForm(woeid_url, appid = getOption("yahooid"))))
woeid <- xpathSApply(parsed_woeid, "//*[local-name()='locality1']", xmlAttrs)[2,] # careful: namespaces!
# build wrapper function
getWeather <- function(place = "New York", ask = "current", temp = "c") {
if (!ask %in% c("current","forecast")) {
stop("Wrong ask parameter. Choose either 'current' or 'forecast'.")
}
if (!temp %in%  c("c", "f")) {
stop("Wrong temp parameter. Choose either 'c' for Celsius or 'f' for Fahrenheit.")
}
## get woeid
base_url <- "http://where.yahooapis.com/v1/places.q('%s')"
woeid_url <- sprintf(base_url, URLencode(place))
parsed_woeid <- xmlParse((getForm(woeid_url, appid = getOption("yahooid"))))
woeid <- xpathSApply(parsed_woeid, "//*[local-name()='locality1']", xmlAttrs)[2,]
## get weather feed
feed_url <- "http://weather.yahooapis.com/forecastrss"
parsed_feed <- xmlParse(getForm(feed_url, .params = list(w = woeid, u = temp)))
## get current conditions
if (ask == "current") {
xpath <- "//yweather:location|//yweather:condition"
conds <- data.frame(t(unlist(xpathSApply(parsed_feed, xpath, xmlAttrs))))
message(sprintf("The weather in %s, %s, %s is %s. Current temperature is %sÂ°%s.", conds$city, conds$region, conds$country, tolower(conds$text), conds$temp, toupper(temp)))
}
## get forecast
if (ask == "forecast") {
location <- data.frame(t(xpathSApply(parsed_feed, "//yweather:location", xmlAttrs)))
forecasts <- data.frame(t(xpathSApply(parsed_feed, "//yweather:forecast", xmlAttrs)))
message(sprintf("Weather forecast for %s, %s, %s:", location$city, location$region, location$country))
return(forecasts)
}
}
getWeather(place = "Paris", ask = "current", temp = "c")
getWeather(place = "Bamberg", ask = "forecast", temp = "c")
yahooid = "v.m4rTvV34GgKVVL5PEAG1uIcHyKfmY8mCJjqSl7Gx3Jkp3s2B14xCc89rQYKOmN8nc.OFbL"
fname <- paste0(normalizePath("~/"),".Renviron")
writeLines(yahooid, fname)
Sys.getenv(yahooid)
### -----------------------------
### workshop exercises
### simon munzert
### -----------------------------
library(stringr)
library(rvest)
library(XML)
library(jsonlite)
library(RCurl)
Sys.getenv(yahooid)
yahooid = "v.m4rTvV34GgKVVL5PEAG1uIcHyKfmY8mCJjqSl7Gx3Jkp3s2B14xCc89rQYKOmN8nc.OFbL"
fname <- paste0(normalizePath("~/"),".Renviron")
writeLines(yahooid, fname)
normalizePath("~/")
yahooid = "yahooid=v.m4rTvV34GgKVVL5PEAG1uIcHyKfmY8mCJjqSl7Gx3Jkp3s2B14xCc89rQYKOmN8nc.OFbL"
fname <- paste0(normalizePath("~/"),".Renviron")
writeLines(yahooid, fname)
Sys.getenv(yahooid)
### -----------------------------
### workshop exercises
### simon munzert
### -----------------------------
library(stringr)
library(rvest)
library(XML)
library(jsonlite)
library(RCurl)
Sys.getenv(yahooid)
yahoo_id = "yahooid=v.m4rTvV34GgKVVL5PEAG1uIcHyKfmY8mCJjqSl7Gx3Jkp3s2B14xCc89rQYKOmN8nc.OFbL"
fname <- paste0(normalizePath("~/"),".Renviron")
fname
writeLines(yahoo_id, fname)
yahoo_id = "yahooid='v.m4rTvV34GgKVVL5PEAG1uIcHyKfmY8mCJjqSl7Gx3Jkp3s2B14xCc89rQYKOmN8nc.OFbL'"
fname <- paste0(normalizePath("~/"),".Renviron")
writeLines(yahoo_id, fname)
Sys.getenv(yahooid)
### -----------------------------
### workshop exercises
### simon munzert
### -----------------------------
library(stringr)
library(rvest)
library(XML)
library(jsonlite)
library(RCurl)
Sys.getenv(yahoo_id)
Sys.getenv(yahooid)
yahooid = c("yahoo_id=v.m4rTvV34GgKVVL5PEAG1uIcHyKfmY8mCJjqSl7Gx3Jkp3s2B14xCc89rQYKOmN8nc.OFbL")
yahoo_id = c("yahoo_id=v.m4rTvV34GgKVVL5PEAG1uIcHyKfmY8mCJjqSl7Gx3Jkp3s2B14xCc89rQYKOmN8nc.OFbL")
fname <- paste0(normalizePath("~/"),".Renviron")
writeLines(yahoo_id, fname)
getwd()
Sys.getenv("")
Sys.getenv("yahoo_id")
### -----------------------------
### political scientists on Wikipedia
### simon munzert
### -----------------------------
## goals ------------------------
# fetch list of AJPS reviewers from PDFs
# locate them on a map
## tasks ------------------------
# downloading PDF files
# importing them into R (as plain text)
# extract information via regex
# geocoding
## packages ---------------------
library(stringr) # string processing
library(rvest) # scraping suite
library(d3Network) # visualizing networks
## directory --------------------
wd <- ("./data/wikipediaPolsci")
dir.create(wd)
setwd(wd)
url <- "http://en.wikipedia.org/wiki/List_of_political_scientists"
browseURL(url)
html <- html(url)
html
anchors <- html_nodes(html, xpath="//a")
length(anchors) # probably too many?
anchors <- html_nodes(html, xpath="//ul/li/a[1]")
links <- html_attr(anchors, "href")
seq_along(links)
?seq_along
links_iffer <-
seq_along(links) >=
seq_along(links)[str_detect(links, "Abramowitz")] &
seq_along(links) <=
seq_along(links)[str_detect(links, "John_Zaller")] &
str_detect(links, "/wiki/")
links_index <- seq_along(links)[links_iffer]
links <- links[links_iffer]
length(links)
links
names <- html_attr(anchors, "title")[links_index]
names
names <- str_replace(names, " \\(.*\\)", "")
names
names <- iconv(names, "utf8", "latin1")
names
## step 4: fetch personal wiki pages
baseurl <- "http://en.wikipedia.org"
HTML <- list()
Fname <- str_c(basename(links), ".html")
URL <- str_c(baseurl, links)
# loop
for ( i in seq_along(links) ){
# url
url <- URL[i]
# fname
fname <- Fname[i]
# download
if ( !file.exists(fname) ) download.file(url, fname)
# read in files
HTML[[i]] <- html(fname)
}
## step 5: identify links between political scientists
# loop preparation
connections <- data.frame(from=NULL, to=NULL)
# loop
for (i in seq_along(HTML)) {
pslinks <- html_attr(
html_nodes(HTML[[i]], xpath="//a"),
"href")
links_in_pslinks <- seq_along(links)[links %in% pslinks]
links_in_pslinks <- links_in_pslinks[links_in_pslinks!=i]
connections <- rbind(
connections,
data.frame(
from=rep(i, length(links_in_pslinks)),
to=links_in_pslinks
)
)
}
names(connections) <- c("from", "to")
head(connections)
View(connections)
seq_along(HTML)
HTML[[1]]
i=1
pslinks <- html_attr(
html_nodes(HTML[[i]], xpath="//a"),
"href")
links_in_pslinks <- seq_along(links)[links %in% pslinks]
i=5
pslinks <- html_attr(
html_nodes(HTML[[i]], xpath="//a"),
"href")
links_in_pslinks <- seq_along(links)[links %in% pslinks]
links_in_pslinks
links_in_pslinks <- links_in_pslinks[links_in_pslinks!=i]
connections <- rbind(
connections,
data.frame(
from=rep(i, length(links_in_pslinks)),
to=links_in_pslinks
)
)
connections <- data.frame(from=NULL, to=NULL)
connections <- rbind(
connections,
data.frame(
from=rep(i, length(links_in_pslinks)),
to=links_in_pslinks
)
)
connections
## step 5: identify links between political scientists
# loop preparation
connections <- data.frame(from=NULL, to=NULL)
# loop
for (i in seq_along(HTML)) {
pslinks <- html_attr(
html_nodes(HTML[[i]], xpath="//a"),
"href")
links_in_pslinks <- seq_along(links)[links %in% pslinks]
links_in_pslinks <- links_in_pslinks[links_in_pslinks!=i]
connections <- rbind(
connections,
data.frame(
from=rep(i, length(links_in_pslinks)),
to=links_in_pslinks
)
)
}
# results
names(connections) <- c("from", "to")
head(connections)
# make symmetrical
connections <- rbind(
connections,
data.frame(from=connections$to,
to=connections$from)
)
## step 6: visualize connections
d3SimpleNetwork(connections,
width = 1000,
height = 900,
file="connections.html")
browseURL("connections.html")
d3ForceNetwork(Links = connections, Nodes = data.frame(name = names), Source = "from",
Target = "to", opacity = 0.9, zoom = T, width = 1000, height = 900, file = "connections2.html")
browseURL('connections2.html')
